class Binding: ...
class GInterface: ...
class InitiallyUnowned: ...
class Object: ...
class ParamSpec: ...
class ParamSpecBoolean: ...
class ParamSpecBoxed: ...
class ParamSpecChar: ...
class ParamSpecDouble: ...
class ParamSpecEnum: ...
class ParamSpecFlags: ...
class ParamSpecFloat: ...
class ParamSpecGType: ...
class ParamSpecInt: ...
class ParamSpecInt64: ...
class ParamSpecLong: ...
class ParamSpecObject: ...
class ParamSpecOverride: ...
class ParamSpecParam: ...
class ParamSpecPointer: ...
class ParamSpecString: ...
class ParamSpecUChar: ...
class ParamSpecUInt: ...
class ParamSpecUInt64: ...
class ParamSpecULong: ...
class ParamSpecUnichar: ...
class ParamSpecValueArray: ...
class ParamSpecVariant: ...
class TypeModule: ...
class TypePlugin: ...
class BindingFlags: ...
class ConnectFlags: ...
class GFlags: ...
class ParamFlags: ...
class SignalFlags: ...
class SignalMatchType: ...
class TypeDebugFlags: ...
class TypeFlags: ...
class TypeFundamentalFlags: ...
class GEnum: ...
class CClosure: ...
class Closure: ...
class ClosureNotifyData: ...
class EnumClass: ...
class EnumValue: ...
class FlagsClass: ...
class FlagsValue: ...
class InterfaceInfo: ...
class ObjectConstructParam: ...
class ParamSpecPool: ...
class ParamSpecTypeInfo: ...
class Parameter: ...
class SignalInvocationHint: ...
class SignalQuery: ...
class TypeClass: ...
class TypeFundamentalInfo: ...
class TypeInfo: ...
class TypeInstance: ...
class TypeInterface: ...
class TypePluginClass: ...
class TypeQuery: ...
class TypeValueTable: ...
class Value: ...
class ValueArray: ...
class WeakRef: ...
class TypeCValue: ...

def add_emission_hook(*args, **kwargs): ...
def boxed_copy(*args, **kwargs): ...
def boxed_free(*args, **kwargs): ...
def cclosure_marshal_BOOLEAN__BOXED_BOXED(*args, **kwargs): ...
def cclosure_marshal_BOOLEAN__FLAGS(*args, **kwargs): ...
def cclosure_marshal_STRING__OBJECT_POINTER(*args, **kwargs): ...
def cclosure_marshal_VOID__BOOLEAN(*args, **kwargs): ...
def cclosure_marshal_VOID__BOXED(*args, **kwargs): ...
def cclosure_marshal_VOID__CHAR(*args, **kwargs): ...
def cclosure_marshal_VOID__DOUBLE(*args, **kwargs): ...
def cclosure_marshal_VOID__ENUM(*args, **kwargs): ...
def cclosure_marshal_VOID__FLAGS(*args, **kwargs): ...
def cclosure_marshal_VOID__FLOAT(*args, **kwargs): ...
def cclosure_marshal_VOID__INT(*args, **kwargs): ...
def cclosure_marshal_VOID__LONG(*args, **kwargs): ...
def cclosure_marshal_VOID__OBJECT(*args, **kwargs): ...
def cclosure_marshal_VOID__PARAM(*args, **kwargs): ...
def cclosure_marshal_VOID__POINTER(*args, **kwargs): ...
def cclosure_marshal_VOID__STRING(*args, **kwargs): ...
def cclosure_marshal_VOID__UCHAR(*args, **kwargs): ...
def cclosure_marshal_VOID__UINT(*args, **kwargs): ...
def cclosure_marshal_VOID__UINT_POINTER(*args, **kwargs): ...
def cclosure_marshal_VOID__ULONG(*args, **kwargs): ...
def cclosure_marshal_VOID__VARIANT(*args, **kwargs): ...
def cclosure_marshal_VOID__VOID(*args, **kwargs): ...
def cclosure_marshal_generic(*args, **kwargs): ...
def enum_complete_type_info(*args, **kwargs): ...
def enum_get_value(*args, **kwargs): ...
def enum_get_value_by_name(*args, **kwargs): ...
def enum_get_value_by_nick(*args, **kwargs): ...
def enum_register_static(*args, **kwargs): ...
def enum_to_string(*args, **kwargs): ...
def flags_complete_type_info(*args, **kwargs): ...
def flags_get_first_value(*args, **kwargs): ...
def flags_get_value_by_name(*args, **kwargs): ...
def flags_get_value_by_nick(*args, **kwargs): ...
def flags_register_static(*args, **kwargs): ...
def flags_to_string(*args, **kwargs): ...
def gtype_get_type(*args, **kwargs): ...
def list_properties(*args, **kwargs): ...
def new(*args, **kwargs): ...
def param_spec_boolean(*args, **kwargs): ...
def param_spec_boxed(*args, **kwargs): ...
def param_spec_char(*args, **kwargs): ...
def param_spec_double(*args, **kwargs): ...
def param_spec_enum(*args, **kwargs): ...
def param_spec_flags(*args, **kwargs): ...
def param_spec_float(*args, **kwargs): ...
def param_spec_gtype(*args, **kwargs): ...
def param_spec_int(*args, **kwargs): ...
def param_spec_int64(*args, **kwargs): ...
def param_spec_long(*args, **kwargs): ...
def param_spec_object(*args, **kwargs): ...
def param_spec_param(*args, **kwargs): ...
def param_spec_pointer(*args, **kwargs): ...
def param_spec_pool_new(*args, **kwargs): ...
def param_spec_string(*args, **kwargs): ...
def param_spec_uchar(*args, **kwargs): ...
def param_spec_uint(*args, **kwargs): ...
def param_spec_uint64(*args, **kwargs): ...
def param_spec_ulong(*args, **kwargs): ...
def param_spec_unichar(*args, **kwargs): ...
def param_spec_variant(*args, **kwargs): ...
def param_type_register_static(*args, **kwargs): ...
def param_value_convert(*args, **kwargs): ...
def param_value_defaults(*args, **kwargs): ...
def param_value_set_default(*args, **kwargs): ...
def param_value_validate(*args, **kwargs): ...
def param_values_cmp(*args, **kwargs): ...
def pointer_type_register_static(*args, **kwargs): ...
def remove_emission_hook(*args, **kwargs): ...
def signal_accumulator_first_wins(*args, **kwargs): ...
def signal_accumulator_true_handled(*args, **kwargs): ...
def signal_add_emission_hook(*args, **kwargs): ...
def signal_chain_from_overridden(*args, **kwargs): ...
def signal_connect_closure(*args, **kwargs): ...
def signal_connect_closure_by_id(*args, **kwargs): ...
def signal_emitv(*args, **kwargs): ...
def signal_get_invocation_hint(*args, **kwargs): ...
def signal_handler_block(*args, **kwargs): ...
def signal_handler_disconnect(*args, **kwargs): ...
def signal_handler_find(*args, **kwargs): ...
def signal_handler_is_connected(*args, **kwargs): ...
def signal_handler_unblock(*args, **kwargs): ...
def signal_handlers_block_matched(*args, **kwargs): ...
def signal_handlers_destroy(*args, **kwargs): ...
def signal_handlers_disconnect_matched(*args, **kwargs): ...
def signal_handlers_unblock_matched(*args, **kwargs): ...
def signal_has_handler_pending(*args, **kwargs): ...
def signal_list_ids(*args, **kwargs): ...
def signal_list_names(*args, **kwargs): ...
def signal_lookup(*args, **kwargs): ...
def signal_name(*args, **kwargs): ...
def signal_new(*args, **kwargs): ...
def signal_override_class_closure(*args, **kwargs): ...
def signal_parse_name(*args, **kwargs): ...
def signal_query(*args, **kwargs): ...
def signal_remove_emission_hook(*args, **kwargs): ...
def signal_stop_emission(*args, **kwargs): ...
def signal_stop_emission_by_name(*args, **kwargs): ...
def signal_type_cclosure_new(*args, **kwargs): ...
def source_set_closure(*args, **kwargs): ...
def source_set_dummy_callback(*args, **kwargs): ...
def strdup_value_contents(*args, **kwargs): ...
def type_add_class_private(*args, **kwargs): ...
def type_add_instance_private(*args, **kwargs): ...
def type_add_interface_dynamic(*args, **kwargs): ...
def type_add_interface_static(*args, **kwargs): ...
def type_check_class_is_a(*args, **kwargs): ...
def type_check_instance(*args, **kwargs): ...
def type_check_instance_is_a(*args, **kwargs): ...
def type_check_instance_is_fundamentally_a(*args, **kwargs): ...
def type_check_is_value_type(*args, **kwargs): ...
def type_check_value(*args, **kwargs): ...
def type_check_value_holds(*args, **kwargs): ...
def type_children(*args, **kwargs): ...
def type_class_adjust_private_offset(*args, **kwargs): ...
def type_class_peek(*args, **kwargs): ...
def type_class_peek_static(*args, **kwargs): ...
def type_class_ref(*args, **kwargs): ...
def type_default_interface_peek(*args, **kwargs): ...
def type_default_interface_ref(*args, **kwargs): ...
def type_default_interface_unref(*args, **kwargs): ...
def type_depth(*args, **kwargs): ...
def type_ensure(*args, **kwargs): ...
def type_free_instance(*args, **kwargs): ...
def type_from_name(*args, **kwargs): ...
def type_fundamental(*args, **kwargs): ...
def type_fundamental_next(*args, **kwargs): ...
def type_get_instance_count(*args, **kwargs): ...
def type_get_plugin(*args, **kwargs): ...
def type_get_qdata(*args, **kwargs): ...
def type_get_type_registration_serial(*args, **kwargs): ...
def type_init(*args, **kwargs): ...
def type_init_with_debug_flags(*args, **kwargs): ...
def type_interface_add_prerequisite(*args, **kwargs): ...
def type_interface_get_plugin(*args, **kwargs): ...
def type_interface_peek(*args, **kwargs): ...
def type_interface_prerequisites(*args, **kwargs): ...
def type_interfaces(*args, **kwargs): ...
def type_is_a(*args, **kwargs): ...
def type_name(*args, **kwargs): ...
def type_name_from_class(*args, **kwargs): ...
def type_name_from_instance(*args, **kwargs): ...
def type_next_base(*args, **kwargs): ...
def type_parent(*args, **kwargs): ...
def type_qname(*args, **kwargs): ...
def type_query(*args, **kwargs): ...
def type_register(*args, **kwargs): ...
def type_register_dynamic(*args, **kwargs): ...
def type_register_fundamental(*args, **kwargs): ...
def type_register_static(*args, **kwargs): ...
def type_set_qdata(*args, **kwargs): ...
def type_test_flags(*args, **kwargs): ...
def value_type_compatible(*args, **kwargs): ...
def value_type_transformable(*args, **kwargs): ...

GBoxed = ...
GObjectWeakRef = ...
GParamSpec = ...
GPointer = ...
G_MAXDOUBLE = ...
G_MAXFLOAT = ...
G_MAXINT = ...
G_MAXINT16 = ...
G_MAXINT32 = ...
G_MAXINT64 = ...
G_MAXINT8 = ...
G_MAXLONG = ...
G_MAXOFFSET = ...
G_MAXSHORT = ...
G_MAXSIZE = ...
G_MAXSSIZE = ...
G_MAXUINT = ...
G_MAXUINT16 = ...
G_MAXUINT32 = ...
G_MAXUINT64 = ...
G_MAXUINT8 = ...
G_MAXULONG = ...
G_MAXUSHORT = ...
G_MINDOUBLE = ...
G_MINFLOAT = ...
G_MININT = ...
G_MININT16 = ...
G_MININT32 = ...
G_MININT64 = ...
G_MININT8 = ...
G_MINLONG = ...
G_MINOFFSET = ...
G_MINSHORT = ...
G_MINSSIZE = ...
IO_ERR = ...
IO_FLAG_APPEND = ...
IO_FLAG_GET_MASK = ...
IO_FLAG_IS_READABLE = ...
IO_FLAG_IS_SEEKABLE = ...
IO_FLAG_IS_WRITEABLE = ...
IO_FLAG_MASK = ...
IO_FLAG_NONBLOCK = ...
IO_FLAG_SET_MASK = ...
IO_HUP = ...
IO_IN = ...
IO_NVAL = ...
IO_OUT = ...
IO_PRI = ...
IO_STATUS_AGAIN = ...
IO_STATUS_EOF = ...
IO_STATUS_ERROR = ...
IO_STATUS_NORMAL = ...
OPTION_ERROR_BAD_VALUE = ...
OPTION_ERROR_FAILED = ...
OPTION_ERROR_UNKNOWN_OPTION = ...
OPTION_FLAG_FILENAME = ...
OPTION_FLAG_HIDDEN = ...
OPTION_FLAG_IN_MAIN = ...
OPTION_FLAG_NOALIAS = ...
OPTION_FLAG_NO_ARG = ...
OPTION_FLAG_OPTIONAL_ARG = ...
OPTION_FLAG_REVERSE = ...
OPTION_REMAINING = ...
PARAM_CONSTRUCT = ...
PARAM_CONSTRUCT_ONLY = ...
PARAM_LAX_VALIDATION = ...
PARAM_MASK = ...
PARAM_READABLE = ...
PARAM_READWRITE = ...
PARAM_STATIC_STRINGS = ...
PARAM_USER_SHIFT = ...
PARAM_WRITABLE = ...
PRIORITY_DEFAULT = ...
PRIORITY_DEFAULT_IDLE = ...
PRIORITY_HIGH = ...
PRIORITY_HIGH_IDLE = ...
PRIORITY_LOW = ...
SIGNAL_ACTION = ...
SIGNAL_DETAILED = ...
SIGNAL_FLAGS_MASK = ...
SIGNAL_MATCH_MASK = ...
SIGNAL_NO_HOOKS = ...
SIGNAL_NO_RECURSE = ...
SIGNAL_RUN_CLEANUP = ...
SIGNAL_RUN_FIRST = ...
SIGNAL_RUN_LAST = ...
SPAWN_CHILD_INHERITS_STDIN = ...
SPAWN_DO_NOT_REAP_CHILD = ...
SPAWN_FILE_AND_ARGV_ZERO = ...
SPAWN_LEAVE_DESCRIPTORS_OPEN = ...
SPAWN_SEARCH_PATH = ...
SPAWN_STDERR_TO_DEV_NULL = ...
SPAWN_STDOUT_TO_DEV_NULL = ...
TYPE_BOOLEAN = ...
TYPE_BOXED = ...
TYPE_CHAR = ...
TYPE_DOUBLE = ...
TYPE_ENUM = ...
TYPE_FLAGS = ...
TYPE_FLAG_RESERVED_ID_BIT = ...
TYPE_FLOAT = ...
TYPE_FUNDAMENTAL_MAX = ...
TYPE_FUNDAMENTAL_SHIFT = ...
TYPE_GSTRING = ...
TYPE_GTYPE = ...
TYPE_INT = ...
TYPE_INT64 = ...
TYPE_INTERFACE = ...
TYPE_INVALID = ...
TYPE_LONG = ...
TYPE_NONE = ...
TYPE_OBJECT = ...
TYPE_PARAM = ...
TYPE_POINTER = ...
TYPE_PYOBJECT = ...
TYPE_RESERVED_BSE_FIRST = ...
TYPE_RESERVED_BSE_LAST = ...
TYPE_RESERVED_GLIB_FIRST = ...
TYPE_RESERVED_GLIB_LAST = ...
TYPE_RESERVED_USER_FIRST = ...
TYPE_STRING = ...
TYPE_STRV = ...
TYPE_UCHAR = ...
TYPE_UINT = ...
TYPE_UINT64 = ...
TYPE_ULONG = ...
TYPE_UNICHAR = ...
TYPE_VALUE = ...
TYPE_VARIANT = ...
VALUE_COLLECT_FORMAT_MAX_LENGTH = ...
VALUE_NOCOPY_CONTENTS = ...
Warning = ...
features = ...
glib_version = ...
pygobject_version = ...
