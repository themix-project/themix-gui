class AsciiType: ...
class FileTest: ...
class Flags: ...
class FormatSizeFlags: ...
class HookFlagMask: ...
class IOCondition: ...
class IOFlags: ...
class KeyFileFlags: ...
class LogLevelFlags: ...
class MarkupCollectType: ...
class MarkupParseFlags: ...
class OptionFlags: ...
class RegexCompileFlags: ...
class RegexMatchFlags: ...
class SpawnFlags: ...
class TestSubprocessFlags: ...
class TestTrapFlags: ...
class TraverseFlags: ...
class BookmarkFileError: ...
class ChecksumType: ...
class ConvertError: ...
class DateDMY: ...
class DateMonth: ...
class DateWeekday: ...
class Enum: ...
class ErrorType: ...
class FileError: ...
class IOChannelError: ...
class IOError: ...
class IOStatus: ...
class KeyFileError: ...
class LogWriterOutput: ...
class MarkupError: ...
class NormalizeMode: ...
class NumberParserError: ...
class OnceStatus: ...
class OptionArg: ...
class OptionError: ...
class RegexError: ...
class SeekType: ...
class ShellError: ...
class SliceConfig: ...
class SpawnError: ...
class TestFileType: ...
class TestLogType: ...
class TestResult: ...
class ThreadError: ...
class TimeType: ...
class TokenType: ...
class TraverseType: ...
class UnicodeBreakType: ...
class UnicodeScript: ...
class UnicodeType: ...
class UserDirectory: ...
class VariantClass: ...
class VariantParseError: ...
class Array: ...
class AsyncQueue: ...
class BookmarkFile: ...
class ByteArray: ...
class Bytes: ...
class Checksum: ...
class Cond: ...
class Data: ...
class Date: ...
class DateTime: ...
class DebugKey: ...
class Dir: ...
class HashTable: ...
class HashTableIter: ...
class Hmac: ...
class Hook: ...
class HookList: ...
class IOChannel: ...
class IOFuncs: ...
class Idle: ...
class KeyFile: ...
class List: ...
class LogField: ...
class MainContext: ...
class MainLoop: ...
class MappedFile: ...
class MarkupParseContext: ...
class MarkupParser: ...
class MatchInfo: ...
class MemVTable: ...
class Node: ...
class Once: ...
class OptionContext: ...
class OptionEntry: ...
class OptionGroup: ...
class PatternSpec: ...
class PollFD: ...
class Private: ...
class PtrArray: ...
class Queue: ...
class RWLock: ...
class Rand: ...
class RecMutex: ...
class Regex: ...
class SList: ...
class Scanner: ...
class ScannerConfig: ...
class Sequence: ...
class SequenceIter: ...
class Source: ...
class SourceCallbackFuncs: ...
class SourceFuncs: ...
class StatBuf: ...
class String: ...
class StringChunk: ...
class TestCase: ...
class TestConfig: ...
class TestLogBuffer: ...
class TestLogMsg: ...
class TestSuite: ...
class Thread: ...
class ThreadPool: ...
class TimeVal: ...
class TimeZone: ...
class Timeout: ...
class Timer: ...
class TrashStack: ...
class Tree: ...
class Variant: ...
class VariantBuilder: ...
class VariantDict: ...
class VariantType: ...
class DoubleIEEE754: ...
class FloatIEEE754: ...
class Mutex: ...
class TokenValue: ...

def access(*args, **kwargs): ...
def ascii_digit_value(*args, **kwargs): ...
def ascii_dtostr(*args, **kwargs): ...
def ascii_formatd(*args, **kwargs): ...
def ascii_strcasecmp(*args, **kwargs): ...
def ascii_strdown(*args, **kwargs): ...
def ascii_string_to_signed(*args, **kwargs): ...
def ascii_string_to_unsigned(*args, **kwargs): ...
def ascii_strncasecmp(*args, **kwargs): ...
def ascii_strtod(*args, **kwargs): ...
def ascii_strtoll(*args, **kwargs): ...
def ascii_strtoull(*args, **kwargs): ...
def ascii_strup(*args, **kwargs): ...
def ascii_tolower(*args, **kwargs): ...
def ascii_toupper(*args, **kwargs): ...
def ascii_xdigit_value(*args, **kwargs): ...
def assert_warning(*args, **kwargs): ...
def assertion_message(*args, **kwargs): ...
def assertion_message_cmpstr(*args, **kwargs): ...
def assertion_message_error(*args, **kwargs): ...
def atexit(*args, **kwargs): ...
def atomic_int_add(*args, **kwargs): ...
def atomic_int_and(*args, **kwargs): ...
def atomic_int_compare_and_exchange(*args, **kwargs): ...
def atomic_int_dec_and_test(*args, **kwargs): ...
def atomic_int_exchange_and_add(*args, **kwargs): ...
def atomic_int_get(*args, **kwargs): ...
def atomic_int_inc(*args, **kwargs): ...
def atomic_int_or(*args, **kwargs): ...
def atomic_int_set(*args, **kwargs): ...
def atomic_int_xor(*args, **kwargs): ...
def atomic_pointer_add(*args, **kwargs): ...
def atomic_pointer_and(*args, **kwargs): ...
def atomic_pointer_compare_and_exchange(*args, **kwargs): ...
def atomic_pointer_get(*args, **kwargs): ...
def atomic_pointer_or(*args, **kwargs): ...
def atomic_pointer_set(*args, **kwargs): ...
def atomic_pointer_xor(*args, **kwargs): ...
def atomic_rc_box_acquire(*args, **kwargs): ...
def atomic_rc_box_alloc(*args, **kwargs): ...
def atomic_rc_box_alloc0(*args, **kwargs): ...
def atomic_rc_box_dup(*args, **kwargs): ...
def atomic_rc_box_get_size(*args, **kwargs): ...
def atomic_rc_box_release(*args, **kwargs): ...
def atomic_rc_box_release_full(*args, **kwargs): ...
def base64_decode(*args, **kwargs): ...
def base64_decode_inplace(*args, **kwargs): ...
def base64_encode(*args, **kwargs): ...
def base64_encode_close(*args, **kwargs): ...
def base64_encode_step(*args, **kwargs): ...
def basename(*args, **kwargs): ...
def bit_lock(*args, **kwargs): ...
def bit_nth_lsf(*args, **kwargs): ...
def bit_nth_msf(*args, **kwargs): ...
def bit_storage(*args, **kwargs): ...
def bit_trylock(*args, **kwargs): ...
def bit_unlock(*args, **kwargs): ...
def bookmark_file_error_quark(*args, **kwargs): ...
def build_filenamev(*args, **kwargs): ...
def build_pathv(*args, **kwargs): ...
def byte_array_free(*args, **kwargs): ...
def byte_array_free_to_bytes(*args, **kwargs): ...
def byte_array_new(*args, **kwargs): ...
def byte_array_new_take(*args, **kwargs): ...
def byte_array_unref(*args, **kwargs): ...
def canonicalize_filename(*args, **kwargs): ...
def chdir(*args, **kwargs): ...
def check_version(*args, **kwargs): ...
def checksum_type_get_length(*args, **kwargs): ...
def child_watch_add(*args, **kwargs): ...
def child_watch_source_new(*args, **kwargs): ...
def clear_error(*args, **kwargs): ...
def close(*args, **kwargs): ...
def compute_checksum_for_bytes(*args, **kwargs): ...
def compute_checksum_for_data(*args, **kwargs): ...
def compute_checksum_for_string(*args, **kwargs): ...
def compute_hmac_for_bytes(*args, **kwargs): ...
def compute_hmac_for_data(*args, **kwargs): ...
def compute_hmac_for_string(*args, **kwargs): ...
def convert(*args, **kwargs): ...
def convert_error_quark(*args, **kwargs): ...
def convert_with_fallback(*args, **kwargs): ...
def datalist_foreach(*args, **kwargs): ...
def datalist_get_data(*args, **kwargs): ...
def datalist_get_flags(*args, **kwargs): ...
def datalist_id_get_data(*args, **kwargs): ...
def datalist_set_flags(*args, **kwargs): ...
def datalist_unset_flags(*args, **kwargs): ...
def dataset_destroy(*args, **kwargs): ...
def dataset_foreach(*args, **kwargs): ...
def dataset_id_get_data(*args, **kwargs): ...
def date_get_days_in_month(*args, **kwargs): ...
def date_get_monday_weeks_in_year(*args, **kwargs): ...
def date_get_sunday_weeks_in_year(*args, **kwargs): ...
def date_is_leap_year(*args, **kwargs): ...
def date_strftime(*args, **kwargs): ...
def date_time_compare(*args, **kwargs): ...
def date_time_equal(*args, **kwargs): ...
def date_time_hash(*args, **kwargs): ...
def date_valid_day(*args, **kwargs): ...
def date_valid_dmy(*args, **kwargs): ...
def date_valid_julian(*args, **kwargs): ...
def date_valid_month(*args, **kwargs): ...
def date_valid_weekday(*args, **kwargs): ...
def date_valid_year(*args, **kwargs): ...
def dcgettext(*args, **kwargs): ...
def dgettext(*args, **kwargs): ...
def dir_make_tmp(*args, **kwargs): ...
def direct_equal(*args, **kwargs): ...
def direct_hash(*args, **kwargs): ...
def dngettext(*args, **kwargs): ...
def double_equal(*args, **kwargs): ...
def double_hash(*args, **kwargs): ...
def dpgettext(*args, **kwargs): ...
def dpgettext2(*args, **kwargs): ...
def environ_getenv(*args, **kwargs): ...
def environ_setenv(*args, **kwargs): ...
def environ_unsetenv(*args, **kwargs): ...
def file_error_from_errno(*args, **kwargs): ...
def file_error_quark(*args, **kwargs): ...
def file_get_contents(*args, **kwargs): ...
def file_open_tmp(*args, **kwargs): ...
def file_read_link(*args, **kwargs): ...
def file_set_contents(*args, **kwargs): ...
def file_test(*args, **kwargs): ...
def filename_display_basename(*args, **kwargs): ...
def filename_display_name(*args, **kwargs): ...
def filename_from_uri(*args, **kwargs): ...
def filename_from_utf8(*args, **kwargs): ...
def filename_to_uri(*args, **kwargs): ...
def filename_to_utf8(*args, **kwargs): ...
def find_program_in_path(*args, **kwargs): ...
def format_size(*args, **kwargs): ...
def format_size_for_display(*args, **kwargs): ...
def format_size_full(*args, **kwargs): ...
def free(*args, **kwargs): ...
def get_application_name(*args, **kwargs): ...
def get_charset(*args, **kwargs): ...
def get_codeset(*args, **kwargs): ...
def get_current_dir(*args, **kwargs): ...
def get_current_time(*args, **kwargs): ...
def get_environ(*args, **kwargs): ...
def get_filename_charsets(*args, **kwargs): ...
def get_home_dir(*args, **kwargs): ...
def get_host_name(*args, **kwargs): ...
def get_language_names(*args, **kwargs): ...
def get_language_names_with_category(*args, **kwargs): ...
def get_locale_variants(*args, **kwargs): ...
def get_monotonic_time(*args, **kwargs): ...
def get_num_processors(*args, **kwargs): ...
def get_prgname(*args, **kwargs): ...
def get_real_name(*args, **kwargs): ...
def get_real_time(*args, **kwargs): ...
def get_system_config_dirs(*args, **kwargs): ...
def get_system_data_dirs(*args, **kwargs): ...
def get_tmp_dir(*args, **kwargs): ...
def get_user_cache_dir(*args, **kwargs): ...
def get_user_config_dir(*args, **kwargs): ...
def get_user_data_dir(*args, **kwargs): ...
def get_user_name(*args, **kwargs): ...
def get_user_runtime_dir(*args, **kwargs): ...
def get_user_special_dir(*args, **kwargs): ...
def getenv(*args, **kwargs): ...
def hash_table_add(*args, **kwargs): ...
def hash_table_contains(*args, **kwargs): ...
def hash_table_destroy(*args, **kwargs): ...
def hash_table_insert(*args, **kwargs): ...
def hash_table_lookup(*args, **kwargs): ...
def hash_table_lookup_extended(*args, **kwargs): ...
def hash_table_remove(*args, **kwargs): ...
def hash_table_remove_all(*args, **kwargs): ...
def hash_table_replace(*args, **kwargs): ...
def hash_table_size(*args, **kwargs): ...
def hash_table_steal(*args, **kwargs): ...
def hash_table_steal_all(*args, **kwargs): ...
def hash_table_steal_extended(*args, **kwargs): ...
def hash_table_unref(*args, **kwargs): ...
def hook_destroy(*args, **kwargs): ...
def hook_destroy_link(*args, **kwargs): ...
def hook_free(*args, **kwargs): ...
def hook_insert_before(*args, **kwargs): ...
def hook_prepend(*args, **kwargs): ...
def hook_unref(*args, **kwargs): ...
def hostname_is_ascii_encoded(*args, **kwargs): ...
def hostname_is_ip_address(*args, **kwargs): ...
def hostname_is_non_ascii(*args, **kwargs): ...
def hostname_to_ascii(*args, **kwargs): ...
def hostname_to_unicode(*args, **kwargs): ...
def idle_add(*args, **kwargs): ...
def idle_remove_by_data(*args, **kwargs): ...
def idle_source_new(*args, **kwargs): ...
def int64_equal(*args, **kwargs): ...
def int64_hash(*args, **kwargs): ...
def int_equal(*args, **kwargs): ...
def int_hash(*args, **kwargs): ...
def intern_static_string(*args, **kwargs): ...
def intern_string(*args, **kwargs): ...
def io_add_watch(*args, **kwargs): ...
def io_channel_error_from_errno(*args, **kwargs): ...
def io_channel_error_quark(*args, **kwargs): ...
def io_create_watch(*args, **kwargs): ...
def key_file_error_quark(*args, **kwargs): ...
def listenv(*args, **kwargs): ...
def locale_from_utf8(*args, **kwargs): ...
def locale_to_utf8(*args, **kwargs): ...
def log_default_handler(*args, **kwargs): ...
def log_remove_handler(*args, **kwargs): ...
def log_set_always_fatal(*args, **kwargs): ...
def log_set_fatal_mask(*args, **kwargs): ...
def log_set_handler(*args, **kwargs): ...
def log_set_writer_func(*args, **kwargs): ...
def log_structured_array(*args, **kwargs): ...
def log_variant(*args, **kwargs): ...
def log_writer_default(*args, **kwargs): ...
def log_writer_format_fields(*args, **kwargs): ...
def log_writer_is_journald(*args, **kwargs): ...
def log_writer_journald(*args, **kwargs): ...
def log_writer_standard_streams(*args, **kwargs): ...
def log_writer_supports_color(*args, **kwargs): ...
def main_context_default(*args, **kwargs): ...
def main_context_get_thread_default(*args, **kwargs): ...
def main_context_ref_thread_default(*args, **kwargs): ...
def main_current_source(*args, **kwargs): ...
def main_depth(*args, **kwargs): ...
def malloc(*args, **kwargs): ...
def malloc0(*args, **kwargs): ...
def malloc0_n(*args, **kwargs): ...
def malloc_n(*args, **kwargs): ...
def markup_error_quark(*args, **kwargs): ...
def markup_escape_text(*args, **kwargs): ...
def mem_is_system_malloc(*args, **kwargs): ...
def mem_profile(*args, **kwargs): ...
def mem_set_vtable(*args, **kwargs): ...
def memdup(*args, **kwargs): ...
def mkdir_with_parents(*args, **kwargs): ...
def nullify_pointer(*args, **kwargs): ...
def number_parser_error_quark(*args, **kwargs): ...
def on_error_query(*args, **kwargs): ...
def on_error_stack_trace(*args, **kwargs): ...
def once_init_enter(*args, **kwargs): ...
def once_init_leave(*args, **kwargs): ...
def option_error_quark(*args, **kwargs): ...
def parse_debug_string(*args, **kwargs): ...
def path_get_basename(*args, **kwargs): ...
def path_get_dirname(*args, **kwargs): ...
def path_is_absolute(*args, **kwargs): ...
def path_skip_root(*args, **kwargs): ...
def pattern_match(*args, **kwargs): ...
def pattern_match_simple(*args, **kwargs): ...
def pattern_match_string(*args, **kwargs): ...
def pointer_bit_lock(*args, **kwargs): ...
def pointer_bit_trylock(*args, **kwargs): ...
def pointer_bit_unlock(*args, **kwargs): ...
def poll(*args, **kwargs): ...
def propagate_error(*args, **kwargs): ...
def quark_from_static_string(*args, **kwargs): ...
def quark_from_string(*args, **kwargs): ...
def quark_to_string(*args, **kwargs): ...
def quark_try_string(*args, **kwargs): ...
def random_double(*args, **kwargs): ...
def random_double_range(*args, **kwargs): ...
def random_int(*args, **kwargs): ...
def random_int_range(*args, **kwargs): ...
def random_set_seed(*args, **kwargs): ...
def rc_box_acquire(*args, **kwargs): ...
def rc_box_alloc(*args, **kwargs): ...
def rc_box_alloc0(*args, **kwargs): ...
def rc_box_dup(*args, **kwargs): ...
def rc_box_get_size(*args, **kwargs): ...
def rc_box_release(*args, **kwargs): ...
def rc_box_release_full(*args, **kwargs): ...
def realloc(*args, **kwargs): ...
def realloc_n(*args, **kwargs): ...
def ref_string_acquire(*args, **kwargs): ...
def ref_string_length(*args, **kwargs): ...
def ref_string_new(*args, **kwargs): ...
def ref_string_new_intern(*args, **kwargs): ...
def ref_string_new_len(*args, **kwargs): ...
def ref_string_release(*args, **kwargs): ...
def regex_check_replacement(*args, **kwargs): ...
def regex_error_quark(*args, **kwargs): ...
def regex_escape_nul(*args, **kwargs): ...
def regex_escape_string(*args, **kwargs): ...
def regex_match_simple(*args, **kwargs): ...
def regex_split_simple(*args, **kwargs): ...
def reload_user_special_dirs_cache(*args, **kwargs): ...
def rmdir(*args, **kwargs): ...
def sequence_get(*args, **kwargs): ...
def sequence_insert_before(*args, **kwargs): ...
def sequence_move(*args, **kwargs): ...
def sequence_move_range(*args, **kwargs): ...
def sequence_range_get_midpoint(*args, **kwargs): ...
def sequence_remove(*args, **kwargs): ...
def sequence_remove_range(*args, **kwargs): ...
def sequence_set(*args, **kwargs): ...
def sequence_swap(*args, **kwargs): ...
def set_application_name(*args, **kwargs): ...
def set_error_literal(*args, **kwargs): ...
def set_prgname(*args, **kwargs): ...
def setenv(*args, **kwargs): ...
def shell_error_quark(*args, **kwargs): ...
def shell_parse_argv(*args, **kwargs): ...
def shell_quote(*args, **kwargs): ...
def shell_unquote(*args, **kwargs): ...
def slice_alloc(*args, **kwargs): ...
def slice_alloc0(*args, **kwargs): ...
def slice_copy(*args, **kwargs): ...
def slice_free1(*args, **kwargs): ...
def slice_free_chain_with_offset(*args, **kwargs): ...
def slice_get_config(*args, **kwargs): ...
def slice_get_config_state(*args, **kwargs): ...
def slice_set_config(*args, **kwargs): ...
def source_remove(*args, **kwargs): ...
def source_remove_by_funcs_user_data(*args, **kwargs): ...
def source_remove_by_user_data(*args, **kwargs): ...
def source_set_name_by_id(*args, **kwargs): ...
def spaced_primes_closest(*args, **kwargs): ...
def spawn_async(*args, **kwargs): ...
def spawn_async_with_fds(*args, **kwargs): ...
def spawn_async_with_pipes(*args, **kwargs): ...
def spawn_check_exit_status(*args, **kwargs): ...
def spawn_close_pid(*args, **kwargs): ...
def spawn_command_line_async(*args, **kwargs): ...
def spawn_command_line_sync(*args, **kwargs): ...
def spawn_error_quark(*args, **kwargs): ...
def spawn_exit_error_quark(*args, **kwargs): ...
def spawn_sync(*args, **kwargs): ...
def stpcpy(*args, **kwargs): ...
def str_equal(*args, **kwargs): ...
def str_has_prefix(*args, **kwargs): ...
def str_has_suffix(*args, **kwargs): ...
def str_hash(*args, **kwargs): ...
def str_is_ascii(*args, **kwargs): ...
def str_match_string(*args, **kwargs): ...
def str_to_ascii(*args, **kwargs): ...
def str_tokenize_and_fold(*args, **kwargs): ...
def strcanon(*args, **kwargs): ...
def strcasecmp(*args, **kwargs): ...
def strchomp(*args, **kwargs): ...
def strchug(*args, **kwargs): ...
def strcmp0(*args, **kwargs): ...
def strcompress(*args, **kwargs): ...
def strdelimit(*args, **kwargs): ...
def strdown(*args, **kwargs): ...
def strdup(*args, **kwargs): ...
def strerror(*args, **kwargs): ...
def strescape(*args, **kwargs): ...
def strfreev(*args, **kwargs): ...
def string_new(*args, **kwargs): ...
def string_new_len(*args, **kwargs): ...
def string_sized_new(*args, **kwargs): ...
def strip_context(*args, **kwargs): ...
def strjoinv(*args, **kwargs): ...
def strlcat(*args, **kwargs): ...
def strlcpy(*args, **kwargs): ...
def strncasecmp(*args, **kwargs): ...
def strndup(*args, **kwargs): ...
def strnfill(*args, **kwargs): ...
def strreverse(*args, **kwargs): ...
def strrstr(*args, **kwargs): ...
def strrstr_len(*args, **kwargs): ...
def strsignal(*args, **kwargs): ...
def strstr_len(*args, **kwargs): ...
def strtod(*args, **kwargs): ...
def strup(*args, **kwargs): ...
def strv_contains(*args, **kwargs): ...
def strv_get_type(*args, **kwargs): ...
def strv_length(*args, **kwargs): ...
def test_add_data_func(*args, **kwargs): ...
def test_add_data_func_full(*args, **kwargs): ...
def test_add_func(*args, **kwargs): ...
def test_assert_expected_messages_internal(*args, **kwargs): ...
def test_bug(*args, **kwargs): ...
def test_bug_base(*args, **kwargs): ...
def test_expect_message(*args, **kwargs): ...
def test_fail(*args, **kwargs): ...
def test_failed(*args, **kwargs): ...
def test_get_dir(*args, **kwargs): ...
def test_incomplete(*args, **kwargs): ...
def test_log_type_name(*args, **kwargs): ...
def test_queue_destroy(*args, **kwargs): ...
def test_queue_free(*args, **kwargs): ...
def test_rand_double(*args, **kwargs): ...
def test_rand_double_range(*args, **kwargs): ...
def test_rand_int(*args, **kwargs): ...
def test_rand_int_range(*args, **kwargs): ...
def test_run(*args, **kwargs): ...
def test_run_suite(*args, **kwargs): ...
def test_set_nonfatal_assertions(*args, **kwargs): ...
def test_skip(*args, **kwargs): ...
def test_subprocess(*args, **kwargs): ...
def test_timer_elapsed(*args, **kwargs): ...
def test_timer_last(*args, **kwargs): ...
def test_timer_start(*args, **kwargs): ...
def test_trap_assertions(*args, **kwargs): ...
def test_trap_fork(*args, **kwargs): ...
def test_trap_has_passed(*args, **kwargs): ...
def test_trap_reached_timeout(*args, **kwargs): ...
def test_trap_subprocess(*args, **kwargs): ...
def thread_error_quark(*args, **kwargs): ...
def thread_exit(*args, **kwargs): ...
def thread_pool_get_max_idle_time(*args, **kwargs): ...
def thread_pool_get_max_unused_threads(*args, **kwargs): ...
def thread_pool_get_num_unused_threads(*args, **kwargs): ...
def thread_pool_set_max_idle_time(*args, **kwargs): ...
def thread_pool_set_max_unused_threads(*args, **kwargs): ...
def thread_pool_stop_unused_threads(*args, **kwargs): ...
def thread_self(*args, **kwargs): ...
def thread_yield(*args, **kwargs): ...
def threads_init(*args, **kwargs): ...
def time_val_from_iso8601(*args, **kwargs): ...
def timeout_add(*args, **kwargs): ...
def timeout_add_seconds(*args, **kwargs): ...
def timeout_source_new(*args, **kwargs): ...
def timeout_source_new_seconds(*args, **kwargs): ...
def trash_stack_height(*args, **kwargs): ...
def trash_stack_peek(*args, **kwargs): ...
def trash_stack_pop(*args, **kwargs): ...
def trash_stack_push(*args, **kwargs): ...
def try_malloc(*args, **kwargs): ...
def try_malloc0(*args, **kwargs): ...
def try_malloc0_n(*args, **kwargs): ...
def try_malloc_n(*args, **kwargs): ...
def try_realloc(*args, **kwargs): ...
def try_realloc_n(*args, **kwargs): ...
def ucs4_to_utf16(*args, **kwargs): ...
def ucs4_to_utf8(*args, **kwargs): ...
def unichar_break_type(*args, **kwargs): ...
def unichar_combining_class(*args, **kwargs): ...
def unichar_compose(*args, **kwargs): ...
def unichar_decompose(*args, **kwargs): ...
def unichar_digit_value(*args, **kwargs): ...
def unichar_fully_decompose(*args, **kwargs): ...
def unichar_get_mirror_char(*args, **kwargs): ...
def unichar_get_script(*args, **kwargs): ...
def unichar_isalnum(*args, **kwargs): ...
def unichar_isalpha(*args, **kwargs): ...
def unichar_iscntrl(*args, **kwargs): ...
def unichar_isdefined(*args, **kwargs): ...
def unichar_isdigit(*args, **kwargs): ...
def unichar_isgraph(*args, **kwargs): ...
def unichar_islower(*args, **kwargs): ...
def unichar_ismark(*args, **kwargs): ...
def unichar_isprint(*args, **kwargs): ...
def unichar_ispunct(*args, **kwargs): ...
def unichar_isspace(*args, **kwargs): ...
def unichar_istitle(*args, **kwargs): ...
def unichar_isupper(*args, **kwargs): ...
def unichar_iswide(*args, **kwargs): ...
def unichar_iswide_cjk(*args, **kwargs): ...
def unichar_isxdigit(*args, **kwargs): ...
def unichar_iszerowidth(*args, **kwargs): ...
def unichar_to_utf8(*args, **kwargs): ...
def unichar_tolower(*args, **kwargs): ...
def unichar_totitle(*args, **kwargs): ...
def unichar_toupper(*args, **kwargs): ...
def unichar_type(*args, **kwargs): ...
def unichar_validate(*args, **kwargs): ...
def unichar_xdigit_value(*args, **kwargs): ...
def unicode_canonical_decomposition(*args, **kwargs): ...
def unicode_canonical_ordering(*args, **kwargs): ...
def unicode_script_from_iso15924(*args, **kwargs): ...
def unicode_script_to_iso15924(*args, **kwargs): ...
def unix_error_quark(*args, **kwargs): ...
def unix_fd_add_full(*args, **kwargs): ...
def unix_fd_source_new(*args, **kwargs): ...
def unix_open_pipe(*args, **kwargs): ...
def unix_set_fd_nonblocking(*args, **kwargs): ...
def unix_signal_add(*args, **kwargs): ...
def unix_signal_add_full(*args, **kwargs): ...
def unix_signal_source_new(*args, **kwargs): ...
def unlink(*args, **kwargs): ...
def unsetenv(*args, **kwargs): ...
def uri_escape_string(*args, **kwargs): ...
def uri_list_extract_uris(*args, **kwargs): ...
def uri_parse_scheme(*args, **kwargs): ...
def uri_unescape_segment(*args, **kwargs): ...
def uri_unescape_string(*args, **kwargs): ...
def usleep(*args, **kwargs): ...
def utf16_to_ucs4(*args, **kwargs): ...
def utf16_to_utf8(*args, **kwargs): ...
def utf8_casefold(*args, **kwargs): ...
def utf8_collate(*args, **kwargs): ...
def utf8_collate_key(*args, **kwargs): ...
def utf8_collate_key_for_filename(*args, **kwargs): ...
def utf8_find_next_char(*args, **kwargs): ...
def utf8_find_prev_char(*args, **kwargs): ...
def utf8_get_char(*args, **kwargs): ...
def utf8_get_char_validated(*args, **kwargs): ...
def utf8_make_valid(*args, **kwargs): ...
def utf8_normalize(*args, **kwargs): ...
def utf8_offset_to_pointer(*args, **kwargs): ...
def utf8_pointer_to_offset(*args, **kwargs): ...
def utf8_prev_char(*args, **kwargs): ...
def utf8_strchr(*args, **kwargs): ...
def utf8_strdown(*args, **kwargs): ...
def utf8_strlen(*args, **kwargs): ...
def utf8_strncpy(*args, **kwargs): ...
def utf8_strrchr(*args, **kwargs): ...
def utf8_strreverse(*args, **kwargs): ...
def utf8_strup(*args, **kwargs): ...
def utf8_substring(*args, **kwargs): ...
def utf8_to_ucs4(*args, **kwargs): ...
def utf8_to_ucs4_fast(*args, **kwargs): ...
def utf8_to_utf16(*args, **kwargs): ...
def utf8_validate(*args, **kwargs): ...
def uuid_string_is_valid(*args, **kwargs): ...
def uuid_string_random(*args, **kwargs): ...
def variant_get_gtype(*args, **kwargs): ...
def variant_is_object_path(*args, **kwargs): ...
def variant_is_signature(*args, **kwargs): ...
def variant_parse(*args, **kwargs): ...
def variant_parse_error_print_context(*args, **kwargs): ...
def variant_parse_error_quark(*args, **kwargs): ...
def variant_parser_get_error_quark(*args, **kwargs): ...
def variant_type_checked_(*args, **kwargs): ...
def variant_type_string_is_valid(*args, **kwargs): ...
def variant_type_string_scan(*args, **kwargs): ...

ANALYZER_ANALYZING = ...
ASCII_DTOSTR_BUF_SIZE = ...
BIG_ENDIAN = ...
CSET_A_2_Z = ...
CSET_DIGITS = ...
CSET_a_2_z = ...
DATALIST_FLAGS_MASK = ...
DATE_BAD_DAY = ...
DATE_BAD_JULIAN = ...
DATE_BAD_YEAR = ...
DIR_SEPARATOR = ...
DIR_SEPARATOR_S = ...
E = ...
GINT16_FORMAT = ...
GINT16_MODIFIER = ...
GINT32_FORMAT = ...
GINT32_MODIFIER = ...
GINT64_FORMAT = ...
GINT64_MODIFIER = ...
GINTPTR_FORMAT = ...
GINTPTR_MODIFIER = ...
GNUC_FUNCTION = ...
GNUC_PRETTY_FUNCTION = ...
GSIZE_FORMAT = ...
GSIZE_MODIFIER = ...
GSSIZE_FORMAT = ...
GSSIZE_MODIFIER = ...
GUINT16_FORMAT = ...
GUINT32_FORMAT = ...
GUINT64_FORMAT = ...
GUINTPTR_FORMAT = ...
HAVE_GINT64 = ...
HAVE_GNUC_VARARGS = ...
HAVE_GNUC_VISIBILITY = ...
HAVE_GROWING_STACK = ...
HAVE_ISO_VARARGS = ...
HOOK_FLAG_USER_SHIFT = ...
IEEE754_DOUBLE_BIAS = ...
IEEE754_FLOAT_BIAS = ...
IO_ERR = ...
IO_FLAG_APPEND = ...
IO_FLAG_GET_MASK = ...
IO_FLAG_IS_READABLE = ...
IO_FLAG_IS_SEEKABLE = ...
IO_FLAG_IS_WRITEABLE = ...
IO_FLAG_MASK = ...
IO_FLAG_NONBLOCK = ...
IO_FLAG_SET_MASK = ...
IO_HUP = ...
IO_IN = ...
IO_NVAL = ...
IO_OUT = ...
IO_PRI = ...
IO_STATUS_AGAIN = ...
IO_STATUS_EOF = ...
IO_STATUS_ERROR = ...
IO_STATUS_NORMAL = ...
KEY_FILE_DESKTOP_ACTION_GROUP_PREFIX = ...
KEY_FILE_DESKTOP_GROUP = ...
KEY_FILE_DESKTOP_KEY_ACTIONS = ...
KEY_FILE_DESKTOP_KEY_CATEGORIES = ...
KEY_FILE_DESKTOP_KEY_COMMENT = ...
KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = ...
KEY_FILE_DESKTOP_KEY_EXEC = ...
KEY_FILE_DESKTOP_KEY_FULLNAME = ...
KEY_FILE_DESKTOP_KEY_GENERIC_NAME = ...
KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN = ...
KEY_FILE_DESKTOP_KEY_HIDDEN = ...
KEY_FILE_DESKTOP_KEY_ICON = ...
KEY_FILE_DESKTOP_KEY_KEYWORDS = ...
KEY_FILE_DESKTOP_KEY_MIME_TYPE = ...
KEY_FILE_DESKTOP_KEY_NAME = ...
KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = ...
KEY_FILE_DESKTOP_KEY_NO_DISPLAY = ...
KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = ...
KEY_FILE_DESKTOP_KEY_PATH = ...
KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = ...
KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = ...
KEY_FILE_DESKTOP_KEY_TERMINAL = ...
KEY_FILE_DESKTOP_KEY_TRY_EXEC = ...
KEY_FILE_DESKTOP_KEY_TYPE = ...
KEY_FILE_DESKTOP_KEY_URL = ...
KEY_FILE_DESKTOP_KEY_VERSION = ...
KEY_FILE_DESKTOP_TYPE_APPLICATION = ...
KEY_FILE_DESKTOP_TYPE_DIRECTORY = ...
KEY_FILE_DESKTOP_TYPE_LINK = ...
LITTLE_ENDIAN = ...
LN10 = ...
LN2 = ...
LOG_2_BASE_10 = ...
LOG_DOMAIN = ...
LOG_FATAL_MASK = ...
LOG_LEVEL_USER_SHIFT = ...
MAJOR_VERSION = ...
MAXDOUBLE = ...
MAXFLOAT = ...
MAXINT = ...
MAXINT16 = ...
MAXINT32 = ...
MAXINT64 = ...
MAXINT8 = ...
MAXLONG = ...
MAXOFFSET = ...
MAXSHORT = ...
MAXSIZE = ...
MAXSSIZE = ...
MAXUINT = ...
MAXUINT16 = ...
MAXUINT32 = ...
MAXUINT64 = ...
MAXUINT8 = ...
MAXULONG = ...
MAXUSHORT = ...
MICRO_VERSION = ...
MINDOUBLE = ...
MINFLOAT = ...
MININT = ...
MININT16 = ...
MININT32 = ...
MININT64 = ...
MININT8 = ...
MINLONG = ...
MINOFFSET = ...
MINOR_VERSION = ...
MINSHORT = ...
MINSSIZE = ...
MODULE_SUFFIX = ...
OPTION_ERROR_BAD_VALUE = ...
OPTION_ERROR_FAILED = ...
OPTION_ERROR_UNKNOWN_OPTION = ...
OPTION_FLAG_FILENAME = ...
OPTION_FLAG_HIDDEN = ...
OPTION_FLAG_IN_MAIN = ...
OPTION_FLAG_NOALIAS = ...
OPTION_FLAG_NO_ARG = ...
OPTION_FLAG_OPTIONAL_ARG = ...
OPTION_FLAG_REVERSE = ...
OPTION_REMAINING = ...
PDP_ENDIAN = ...
PI = ...
PID_FORMAT = ...
PI_2 = ...
PI_4 = ...
POLLFD_FORMAT = ...
PRIORITY_DEFAULT = ...
PRIORITY_DEFAULT_IDLE = ...
PRIORITY_HIGH = ...
PRIORITY_HIGH_IDLE = ...
PRIORITY_LOW = ...
SEARCHPATH_SEPARATOR = ...
SEARCHPATH_SEPARATOR_S = ...
SIZEOF_LONG = ...
SIZEOF_SIZE_T = ...
SIZEOF_SSIZE_T = ...
SIZEOF_VOID_P = ...
SOURCE_CONTINUE = ...
SOURCE_REMOVE = ...
SPAWN_CHILD_INHERITS_STDIN = ...
SPAWN_DO_NOT_REAP_CHILD = ...
SPAWN_FILE_AND_ARGV_ZERO = ...
SPAWN_LEAVE_DESCRIPTORS_OPEN = ...
SPAWN_SEARCH_PATH = ...
SPAWN_STDERR_TO_DEV_NULL = ...
SPAWN_STDOUT_TO_DEV_NULL = ...
SQRT2 = ...
STR_DELIMITERS = ...
SYSDEF_AF_INET = ...
SYSDEF_AF_INET6 = ...
SYSDEF_AF_UNIX = ...
SYSDEF_MSG_DONTROUTE = ...
SYSDEF_MSG_OOB = ...
SYSDEF_MSG_PEEK = ...
TIME_SPAN_DAY = ...
TIME_SPAN_HOUR = ...
TIME_SPAN_MILLISECOND = ...
TIME_SPAN_MINUTE = ...
TIME_SPAN_SECOND = ...
UNICHAR_MAX_DECOMPOSITION_LENGTH = ...
URI_RESERVED_CHARS_GENERIC_DELIMITERS = ...
URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = ...
USEC_PER_SEC = ...
USER_DIRECTORY_DESKTOP = ...
USER_DIRECTORY_DOCUMENTS = ...
USER_DIRECTORY_DOWNLOAD = ...
USER_DIRECTORY_MUSIC = ...
USER_DIRECTORY_PICTURES = ...
USER_DIRECTORY_PUBLIC_SHARE = ...
USER_DIRECTORY_TEMPLATES = ...
USER_DIRECTORY_VIDEOS = ...
VA_COPY_AS_ARRAY = ...
VERSION_MIN_REQUIRED = ...
WIN32_MSG_HANDLE = ...
glib_version = ...
pyglib_version = ...
